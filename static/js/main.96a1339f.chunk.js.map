{"version":3,"sources":["firebase.js","Page/LoginForm.js","Page/Auth.js","Page/Tweet.js","Page/TweetFactory.js","Page/Home.js","components/Navigation.js","Page/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","auth","firebaseInstance","dbService","firestore","storageService","storage","LoginForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","Tweet","tweetObj","isOwner","edit","setEdit","text","newTweet","setNewTweet","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEdit","update","src","width","height","alt","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","newArray","docs","map","Navigation","to","displayName","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","handleSubmit","e","updateProfile","signOut","push","AppRouter","isLoggedin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","arg","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96a1339f.chunk.js","sourcesContent":["import firebase from \"firebase/compat/app\";\nimport \"firebase/compat/storage\";\nimport \"firebase/compat/auth\";\nimport \"firebase/compat/firestore\"; // 파이어베이스 데이터베이스\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTO_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig); // 여기서만 사용할것\n\nexport const authService = firebase.auth(); //다른 컴포넌트에서 참조할것이므로 익스포트하고\nexport const firebaseInstance = firebase;\nexport const dbService = firebase.firestore(); //홈에서 데이터베이스를 저장할거다\nexport const storageService = firebase.storage();\n//오토 서비스를 잘 받아오는지?\n","import React, { useState } from \"react\";\nimport { authService } from \"../firebase\";\n\nconst LoginForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true); // Account를 가지고 있는지 확인해서, newAccount 가 필요한 경우 true\n  const [error, setError] = useState(\"\"); // 에러관리 // 무슨에러를 담아야할까?\n\n  const onChange = (event) => {\n    const {\n      target: { name, value },\n    } = event;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n  const onSubmit = async (event) => {\n    // createUserWithEmailAndPassword는 promise를 return 하기 때문에 async로 비동기화 시킴\n    event.preventDefault();\n    try {\n      let data;\n      if (newAccount) {\n        // newAccount의 상태에 따라서 받은 input을 submit의 method로 계정 생성에 쓸건지, 로그인에 쓸건지 조건을 주고 있다.\n        data = await authService.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n      } else {\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n      console.log(data);\n    } catch (error) {\n      setError(\"The email address is already in use by another account\"); //에러안의 메세지가\n    }\n  };\n  const toggleAccount = () => setNewAccount((prev) => !prev); //전키를 기억해서\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <input\n          name=\"email\"\n          type=\"text\"\n          placeholder=\"Email\"\n          required\n          value={email}\n          onChange={onChange}\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          required\n          value={password}\n          onChange={onChange}\n        />\n        {/*에러메시지 에러가 있다 면 에러가 seterror로 변함 */}\n        <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} />\n        {error}\n      </form>\n      <span onClick={toggleAccount}>\n        {newAccount ? \"Sign In\" : \"Create Account\"}\n      </span>\n    </>\n  );\n};\n\nexport default LoginForm;\n","//로그인 환경\nimport { authService, firebaseInstance } from \"../firebase\";\nimport LoginForm from \"./LoginForm\";\n\nconst Auth = () => {\n  const onSocialClick = async (event) => {\n    const {\n      target: { name },\n    } = event;\n    let provider;\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n    const data = await authService.signInWithPopup(provider);\n  };\n\n  return (\n    <div>\n      <LoginForm />\n      <div>\n        <button onClick={onSocialClick} name=\"google\">\n          Continue with Google\n        </button>\n        <button onClick={onSocialClick} name=\"github\">\n          Continue with Github\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default Auth;\n\n//로그인할때는 폼태그 폼에 온 서브밋으로 제출할수있게 만들어야함 서버로\n\n/* 뉴어카운트가 트루일때는 가입할때의 상태인데 만약 상태가 있다면 펄스느 로그인할때의 상태이다 \n   setPersistence = loca,session, none, 옵션 로그인을 한상태를 유지는 어떠헥?\n\n   local : 웹 브라우조를 종료해도 유지\n   session : 웹 브라우조의 탭을 종료하면 로그아웃\n   none : 새로고침하면 로그아웃\n   \n*/\n\n// 이벤트 타겟 네임으로 로그인구별..(event.target.name)\n// 소셜 로그인에는 provider가 필요하다\n","import { dbService, storageService } from \"../firebase\";\nimport { useState } from \"react\";\n/* creatorid 로 uid추가한이유는 삭제와 수정기능에 필요하기때문이다\n트윗을쓴사람만 삭제나 수정이 가능하게 하려면 creatorId와 현재 로그인사람의 uid를 비교해서 같으면 삭제 수정을 보여주면된다\n*/\n\nconst Tweet = ({ tweetObj, isOwner }) => {\n  const [edit, setEdit] = useState(false); //토글상태를 관리 버튼을 눌렀을대 입력란과 버튼이 나타나는 기준점\n  const [newTweet, setNewTweet] = useState(tweetObj.text); //초깃값관리\n\n  const onDeleteClick = async () => {\n    const ok = window.confirm(\"삭제하시겠습니까?\");\n    if (ok) {\n      await dbService.doc(`tweets/${tweetObj.id}`).delete();\n      if (tweetObj.attachmentUrl !== \"\")\n        await storageService.refFromURL(tweetObj.attachmentUrl).delete();\n    }\n  };\n\n  const toggleEdit = () => setEdit((prev) => !prev);\n  //유즈스테이츠에 함수로 인자를 전달하면  인자로 전달한 함수의 첫번째 인자에(prev)에 이전의 상태가 넘어온다\n\n  const onChange = (event) => {\n    setNewTweet(event.target.value);\n  };\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    await dbService.doc(`tweets/${tweetObj.id}`).update({ text: newTweet });\n    setEdit(false);\n  };\n\n  return (\n    <div>\n      {edit ? ( //false라면 이게 보이고 트루라면 밑에게 보인다\n        <>\n          <form onSubmit={onSubmit}>\n            <input onChange={onChange} value={newTweet} required />\n            <input type=\"submit\" value=\"Update Tweet\" />\n          </form>\n          <button onClick={toggleEdit}>Cencle</button>\n        </>\n      ) : (\n        <>\n          <h4>{tweetObj.text}</h4>{\" \"}\n          {tweetObj.attachmentUrl && (\n            <img\n              src={tweetObj.attachmentUrl}\n              width=\"50px\"\n              height=\"50px\"\n              alt=\"\"\n            />\n          )}\n          {/*isOwner는 로그인한 아이디가 현재아이디와같다면 보여주는것이다 */}\n          {isOwner && (\n            <>\n              <button onClick={onDeleteClick}>Delete Tweet</button>\n              <button onClick={toggleEdit}>Edit Tweet</button>\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Tweet;\n","import { useState } from \"react\";\nimport { dbService, storageService } from \"../firebase\";\nimport { v4 as uuidv4 } from \"uuid\";\nconst TweetFactory = ({ userObj }) => {\n  // console.log(userObj); //uid가 있다 (userid)\n  const [tweet, setTweet] = useState(\"\"); //트윗\n\n  const [attachment, setAttachment] = useState(\"\"); //사진 미리보기 구현\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    // await dbService\n    //   .collection(\"tweets\") //컬렉션을 생성한다//add는 파이어스토어에 저장할때 add\n    //   .add({ text: tweet, createdAt: Date.now(), creatorId: userObj.uid }); //파이어베이스 데이터베이스에 저장//문서생성\n    // setTweet(\"\"); //트위한후 초기화\n    let attachmentUrl = \"\";\n    if (attachment !== \"\") {\n      //atta가 있을때만 스토리지에 등록할수있어 파일을\n      const attachmentRef = storageService\n        .ref()\n        .child(`${userObj.uid}/${uuidv4()}`);\n      //스토리지 호출   레퍼호출 차일드함수에 아이디를 폴더이름으로 파일이름을 uuidv4처리\n      const response = await attachmentRef.putString(attachment, \"data_url\");\n      attachmentUrl = await response.ref.getDownloadURL(); // putString 함수\n    }\n    await dbService.collection(\"tweets\").add({\n      text: tweet,\n      createdAt: Date.now(),\n      creatorId: userObj.uid,\n      attachmentUrl,\n    });\n    setTweet(\"\");\n    setAttachment(\"\");\n  };\n\n  const onChange = (event) => {\n    event.preventDefault();\n    const {\n      target: { value },\n    } = event;\n    setTweet(value);\n    //event.target.value\n  };\n\n  const onFileChange = (event) => {\n    const {\n      target: { files }, //구조분해할당\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader(); //파일을 읽어주는 브라우저 api\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setAttachment(result); //url값을 얻기위해 구조분해할당\n    };\n    reader.readAsDataURL(theFile);\n  };\n  const onClearAttachment = () => setAttachment(\"\");\n  //readAsDataURL 은 파일을 인식하는시점과 끝남시점을 포함하궈있어서 시점까지 관리해줘야함\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"무슨 생각을 하고있나요?\"\n        maxLength={120}\n        value={tweet}\n        onChange={onChange}\n      />\n      <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\n      {/*웹에올릴때는 타입은 파일로하면된다 */}\n      <input type=\"submit\" value=\"Tweet\" />\n      {attachment && (\n        <div>\n          <img src={attachment} width=\"50px\" height=\"50px\" alt=\"\" />\n          <button onClick={onClearAttachment}>Clear</button>\n        </div>\n      )}\n      {/*&& attachment가 있을경우 */}\n    </form>\n  );\n};\n\nexport default TweetFactory;\n","//홈.. 페이지로 프로필이나 트윗등록이나 여러가지 할수잇는 환경이다\nimport { useState, useEffect } from \"react\";\nimport { dbService } from \"../firebase\";\n\nimport Tweet from \"./Tweet\";\nimport TweetFactory from \"./TweetFactory\";\nconst Home = ({ userObj }) => {\n  // console.log(userObj); //uid가 있다 (userid)\n\n  const [tweets, setTweets] = useState([]); //목록\n\n  // const getTweets = async () => {\n  //   const dbTweet = await dbService.collection(\"tweets\").get(); //데이터베이스 트윗 겟요청\n  //   //겟함수는 처음에 화면을 렌더링할?때만 쓴다\n  //   dbTweet.forEach((doc) => {\n  //     const tweetObject = { ...doc.data(), id: doc.id };\n  //     setTweets((prev) => [tweetObject, ...prev]);\n  //   });\n  // }; //어싱크 어웨이트는 따로뺴서 함수로 만들어주고 유즈이펙트에서써야함\n\n  useEffect(() => {\n    // getTweets();\n    dbService.collection(\"tweets\").onSnapshot((snapshot) => {\n      const newArray = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      setTweets(newArray); //tweets->셋 트위츠\n    });\n  }, []);\n\n  return (\n    <>\n      <TweetFactory userObj={userObj} />\n      <div>\n        {tweets.map((tweet) => {\n          return (\n            <Tweet\n              key={tweet.id}\n              tweetObj={tweet}\n              isOwner={tweet.creatorId === userObj.uid}\n            ></Tweet>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n//제출 서브밋에 벨류를 설정해주면 트윗으로 문자가 변하고 타입을 서브밋으로하면 클릭버튼으로 바뀐다\nexport default Home;\n//현재로썬 누가 쓴글인지? 모르겟네..\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navigation = ({ userObj }) => {\n  console.log(userObj);\n  return (\n    <div>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/profile\">{userObj.displayName}의 Profile</Link>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n};\n\nexport default Navigation;\n\n//링크로 홈키누르면 홈 마이프로필은 프로필 화면으로 가는거다\n","import { useHistory } from \"react-router-dom\";\nimport { authService, dbService } from \"../firebase\";\nimport { useState, useEffect } from \"react\";\n\nconst Profile = ({ userObj, refreshUser }) => {\n  const history = useHistory();\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n  //뉴디스플레이는 새별명을 지어주는거\n  const onLogOutClick = () => {\n    //로그아웃클릭을했을때 그냥 홈으로 바꿔줌\n    authService.signOut();\n    history.push(\"/\");\n  };\n\n  const handleChange = (e) => {\n    setNewDisplayName(e.target.value);\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (userObj.displayName !== newDisplayName) {\n      await userObj.updateProfile({ displayName: newDisplayName });\n      refreshUser();\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          onChange={handleChange}\n          value={newDisplayName}\n          type=\"text\"\n          placeholder=\"Display name\"\n        />\n        <input type=\"submit\" value=\"Update Profile\" />\n      </form>\n      <button onClick={onLogOutClick}>Log Out</button>\n    </>\n  );\n};\n//signOut 함수는 로그인 간단하게 해준다\nexport default Profile;\n//안될때는 그냥 노드 모듈다시깔고 ^^\n","import { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Auth from \"../Page/Auth\";\nimport Home from \"../Page/Home\";\nimport Navigation from \"./Navigation\";\nimport Profile from \"../Page/Profile\";\n\nconst AppRouter = ({ isLoggedin, userObj, refreshUser }) => {\n  return (\n    //로그인 되상태에서만 네비게이션 로그인이 되면 홈 컴포넌트 로그아웃이면 Auth\n    <Router>\n      {isLoggedin && <Navigation userObj={userObj} />}\n      <Switch>\n        {isLoggedin ? (\n          <>\n            <Route exact={true} path=\"/\">\n              <Home userObj={userObj} />\n            </Route>\n            <Route exact={true} path=\"/profile\">\n              <Profile refreshUser={refreshUser} userObj={userObj} />\n            </Route>\n          </>\n        ) : (\n          <Route exact={true}>\n            <Auth />\n          </Route>\n        )}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import { useEffect, useState } from \"react\";\nimport AppRouter from \"./Router\";\nimport { authService } from \"../firebase\";\n//내가 서버를만든상태라면 전부내가 회원가입로그인기능을 구축해야되지만 파이어베이스를이용한다면 모든기능을 가단하게\n// 소셜 로그인까지 적용할수있다.\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        //유저의 값이 있는경우\n\n        setUserObj({\n          uid: user.uid,\n          displayName: user.displayName,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(false); //아니면 펄스\n      }\n      setInit(true);\n    });\n  }, []);\n  //로그인정보를 받게됬을대 파이어베이스가 초기화되는 시점.. 이시점을 유즈이펙트로 잡아내고 로그인 오나료후 화면 렌더링\n  //onAuthStateChanged 함수는 인증상태가 바뀌는것을 감지하는 함수\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      uid: user.uid,\n      displayName: user.displayName,\n      updateProfile: (arg) => {\n        user.updateProfile(arg);\n      },\n    });\n  };\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedin={Boolean(userObj)}\n          userObj={userObj}\n        /> //유저obj가 set으로 유즈이펙트로 연결햇을시에 전송\n      ) : (\n        \"initializing...\"\n      )}\n      {/* <footer>Copyright@{new Date().getFullYear()}</footer> */}\n    </>\n  );\n}\n\nexport default App;\n\n/*\n 보통 웹 만들때 푸터로 카피라이트 간단하게 삽입해보자\n 앱에서 상태관리를 관리해주고있다\n jsconfig.json -> npm install dotenv -> vs껏다키기\n\n 페이지를 이루는 폴더는 나는 페이지에 저장할거고\n 페이지의 구성요소들은 컴포넌트에 저장할것이다\n*/\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}